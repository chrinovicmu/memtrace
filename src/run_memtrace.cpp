
// run_memtrace.cpp
extern "C" {
#include "memtrace.skel.h"   // generated by bpftool
}
#include <iostream>
#include <signal.h>

static volatile bool exiting = false;
static void sigint(int) { exiting = true; }

int main() {
    signal(SIGINT, sigint);

    struct memtrace_bpf *skel = memtrace_bpf__open();
    if (!skel) {
        std::cerr << "Failed to open skeleton\n";
        return 1;
    }

    if (memtrace_bpf__load(skel)) {
        std::cerr << "Failed to load BPF skeleton\n";
        memtrace_bpf__close(skel);
        return 1;
    }

    /* Attach all programs that have auto-attach behavior */
    if (memtrace_bpf__attach(skel)) {
        std::cerr << "Failed to attach BPF programs\n";
        memtrace_bpf__close(skel);
        return 1;
    }

    std::cout << "Attached. Press Ctrl-C to exit\n";
    while (!exiting) {
        sleep(1);
        // Here you'd create a perf buffer to read events from skel->maps.events
        // or periodically read maps using skel->maps.*
    }

    memtrace_bpf__destroy(skel);
    return 0;
}
